/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘MyFlightRESTService.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir26 = null;
        public BindDirection bind_dir27 = null;
        public BindDirection bind_dir28 = null;
        public BindDirection bind_dir29 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity14 = null;
        public BindDirection bind_dir30 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity14_Policy = null;
        public BindDirection bind_dir31 = null;
        public BindDirection bind_dir32 = null;
        public BindDirection bind_dir33 = null;
        public BindDirection bind_dir34 = null;
        public BindDirection bind_dir35 = null;
        public BindDirection bind_dir36 = null;
        public BindDirection bind_dir37 = null;
        public BindDirection bind_dir38 = null;
        public BindDirection bind_dir39 = null;
        public BindDirection bind_dir40 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	Directory.SetCurrentDirectory(this._context.ScriptPath);
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity10 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity10");
            _flow.DataFetchActivity7 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity7");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity9 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity9");
            _flow.DataExporterActivity12 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity12");
            _flow.DataExporterCloseActivity13 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity13");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity8 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity8");
            _flow.DataDisconnectActivity11 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity11");
            this.DataCursorActivity14 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity14");
            this.DataCursorActivity14_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence6 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence6");
            _flow.RESTActivityV25 = new HP.ST.Ext.RestActivity.RESTActivityV2<RESTActivityV25Input,RESTActivityV25Output>(_context,"RESTActivityV25");
            _flow.DataFetchActivity10.Comment = @"";
            _flow.DataFetchActivity10.IconPath = @"";
            _flow.DataFetchActivity10.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity10.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity10_QueryParameters_Document = new XmlDocument();
            DataFetchActivity10_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity10Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>1fa2fd2c-09b4-454a-8a0a-5ec3dee05d50</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Flights_REST!Output</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>Flights_REST</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{Flights_REST!Output.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Output$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity10_QueryParameters_Document.LoadXml(xmlDataFetchActivity10Params);
            _flow.DataFetchActivity10.QueryParameters = DataFetchActivity10_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Flights_REST!Output", _flow.DataFetchActivity10);
            this.Activities.Add (_flow.DataFetchActivity10);
            _flow.DataFetchActivity7.Comment = @"";
            _flow.DataFetchActivity7.IconPath = @"";
            _flow.DataFetchActivity7.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity7.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity7_QueryParameters_Document = new XmlDocument();
            DataFetchActivity7_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity7Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>7db8c2c3-58e6-442b-9efc-eaedd270f918</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Flights_REST!Input</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>Flights_REST</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{Flights_REST!Input.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Input$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity7_QueryParameters_Document.LoadXml(xmlDataFetchActivity7Params);
            _flow.DataFetchActivity7.QueryParameters = DataFetchActivity7_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Flights_REST!Input", _flow.DataFetchActivity7);
            this.Activities.Add (_flow.DataFetchActivity7);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Début";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            _flow.StartActivity1.KafkaSSL = new HP.ST.Fwk.KafkaFWK.KafkaSSLProperties();
            _flow.StartActivity1.IsKafkaUsed = false;
            _flow.StartActivity1.KafkaSSL.StrEnableSSL = @"No";
            _flow.StartActivity1.KafkaSSL.SSLCALocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientCertificateLocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyLocation = @"";
            _flow.StartActivity1.KafkaSASL = new HP.ST.Fwk.KafkaFWK.KafkaSASLProperties();
            _flow.StartActivity1.KafkaSASL.StrEnableSASL = @"No";
            _flow.StartActivity1.KafkaSASL.StrMechanism = @"GSSAPI";
            _flow.StartActivity1.KafkaSASL.StrServiceName = @"";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Exécution pour 8 itérations";
            _flow.Loop2.NumberOfIterations = (int)8;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Flux du test";
            _flow.Loop2.Activities.Add (this.DataCursorActivity14);
            _flow.Loop2.Activities.Add (_flow.Sequence6);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity9.Comment = @"";
            _flow.DataExporterActivity9.IconPath = @"";
            VTDPropertyInfoBase pi51 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter26 = new VTDObjectGetter(pi51);
            VTDPropertyInfoBase pi52 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter26 = new VTDObjectSetter(pi52);
            binding_setter26 = new StringFormaterDecorator(binding_setter26,"{Step.DataFetchActivity7.OutTable}");
            bind_dir26 = new BindDirection(_flow.DataFetchActivity7,binding_getter26,binding_setter26,BindTargetType.ToInProperty);
            _flow.DataExporterActivity9.InDirections.Add(bind_dir26);
            this.Activities.Add (_flow.DataExporterActivity9);
            _flow.DataExporterActivity12.Comment = @"";
            _flow.DataExporterActivity12.IconPath = @"";
            VTDPropertyInfoBase pi53 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter27 = new VTDObjectGetter(pi53);
            VTDPropertyInfoBase pi54 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter27 = new VTDObjectSetter(pi54);
            binding_setter27 = new StringFormaterDecorator(binding_setter27,"{Step.DataFetchActivity10.OutTable}");
            bind_dir27 = new BindDirection(_flow.DataFetchActivity10,binding_getter27,binding_setter27,BindTargetType.ToInProperty);
            _flow.DataExporterActivity12.InDirections.Add(bind_dir27);
            this.Activities.Add (_flow.DataExporterActivity12);
            _flow.DataExporterCloseActivity13.Comment = @"";
            _flow.DataExporterCloseActivity13.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity13);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"Fin";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity8.Comment = @"";
            _flow.DataDisconnectActivity8.IconPath = @"";
            VTDPropertyInfoBase pi55 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter28 = new VTDObjectGetter(pi55);
            VTDPropertyInfoBase pi56 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter28 = new VTDObjectSetter(pi56);
            binding_setter28 = new StringFormaterDecorator(binding_setter28,"{Step.DataFetchActivity7.OutTable}");
            bind_dir28 = new BindDirection(_flow.DataFetchActivity7,binding_getter28,binding_setter28,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity8.InDirections.Add(bind_dir28);
            this.Activities.Add (_flow.DataDisconnectActivity8);
            _flow.DataDisconnectActivity11.Comment = @"";
            _flow.DataDisconnectActivity11.IconPath = @"";
            VTDPropertyInfoBase pi57 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter29 = new VTDObjectGetter(pi57);
            VTDPropertyInfoBase pi58 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter29 = new VTDObjectSetter(pi58);
            binding_setter29 = new StringFormaterDecorator(binding_setter29,"{Step.DataFetchActivity10.OutTable}");
            bind_dir29 = new BindDirection(_flow.DataFetchActivity10,binding_getter29,binding_setter29,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity11.InDirections.Add(bind_dir29);
            this.Activities.Add (_flow.DataDisconnectActivity11);
            this.DataCursorActivity14.Comment = @"";
            this.DataCursorActivity14.IconPath = @"";
            VTDPropertyInfoBase pi59 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter30 = new VTDObjectGetter(pi59);
            VTDPropertyInfoBase pi60 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter30 = new VTDObjectSetter(pi60);
            binding_setter30 = new StringFormaterDecorator(binding_setter30,"{Step.DataFetchActivity7.OutTable}");
            bind_dir30 = new BindDirection(_flow.DataFetchActivity7,binding_getter30,binding_setter30,BindTargetType.ToInProperty);
            this.DataCursorActivity14.InDirections.Add(bind_dir30);
            this.DataCursorActivity14_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity14_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity14_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity14_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity14_Policy.StartCondition.Value = "";
            this.DataCursorActivity14_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity14_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity14_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity14_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity14_Policy.EndCondition.Value = "";
            this.DataCursorActivity14_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity14_Policy.StepSize = 1;
            this.DataCursorActivity14_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity14.Policy = this.DataCursorActivity14_Policy;
            this.DataCursorActivity14.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity14.ResetCursor;
            _flow.Sequence6.Comment = @"";
            _flow.Sequence6.IconPath = @"";
            _flow.Sequence6.Name = @"Séquence6";
            _flow.Sequence6.Activities.Add (_flow.RESTActivityV25);
            _flow.RESTActivityV25.TextBody = @"";
            _flow.RESTActivityV25.TextXmlBody = @"";
            _flow.RESTActivityV25.FileBody = @"";
            _flow.RESTActivityV25.PostBody = @"";
            _flow.RESTActivityV25.Url = @"http://localhost:8000/Flights_REST/FlightOrders";
            _flow.RESTActivityV25.HttpMethod = @"POST";
            _flow.RESTActivityV25.HttpVersion = @"1.1";
            _flow.RESTActivityV25.RequestHeaders = new Pair<string, string>[1];
            _flow.RESTActivityV25.RequestHeaders[0] = new Pair<string, string>();
            _flow.RESTActivityV25.RequestHeaders[0].Key = @"Content-Type";
            _flow.RESTActivityV25.RequestHeaders[0].Value = @"text/xml";
            _flow.RESTActivityV25.Comment = @"";
            _flow.RESTActivityV25.IconPath = @"AddIns\ServiceTest\REST\ictb_REST_Method_16.png";
            _flow.RESTActivityV25.RequestBodyType = @"Xml";
            _flow.RESTActivityV25.ResponseType = @"Xml";
            _flow.RESTActivityV25.Name = @"ReserveOrder5";
            _flow.RESTActivityV25.Proxy.Server = @"";
            _flow.RESTActivityV25.Proxy.Username = @"";
            _flow.RESTActivityV25.Proxy.Password = @"";
            _flow.RESTActivityV25.Authentication.Username = @"";
            _flow.RESTActivityV25.Authentication.Password = @"";
            _flow.RESTActivityV25.Authentication.PreemptiveAuthentication = false;
            _flow.RESTActivityV25.ConnectionType = @"Keep-Alive";
            _flow.RESTActivityV25.Timeout = (int)100000;
            _flow.RESTActivityV25.ClientCertificate.Password = @"";
            _flow.RESTActivityV25.ClientCertificate.FileSystem.Path = @"";
            _flow.RESTActivityV25.UseClientCertificate = false;
            _flow.RESTActivityV25.MaximumAutomaticRedirections = (int)3;
            _flow.RESTActivityV25.AllowRedirections = true;
            _flow.RESTActivityV25.ReuseCookies = false;
            _flow.RESTActivityV25.ExpectServerError = false;
            _flow.RESTActivityV25.HanaRequest = false;
            XmlDocument RESTActivityV25_XMLBody_Document = new XmlDocument();
            RESTActivityV25_XMLBody_Document.PreserveWhitespace = true;
            RESTActivityV25_XMLBody_Document.LoadXml(
@"<FlightOrderDetails xmlns=""HP.SOAQ.SampleApp"">
  <Class>{DataSource.Flights_REST!Input.Class}</Class>
  <CustomerName>{DataSource.Flights_REST!Input.CustomerName}</CustomerName>
  <DepartureDate>{DataSource.Flights_REST!Input.DepartureDate}</DepartureDate>
  <FlightNumber>{DataSource.Flights_REST!Input.FlightNumber}</FlightNumber>
  <NumberOfTickets>{DataSource.Flights_REST!Input.NumberOfTickets}</NumberOfTickets>
  </FlightOrderDetails>");
            _flow.RESTActivityV25.XMLBody = RESTActivityV25_XMLBody_Document;
            XmlDocument RESTActivityV25_RequestMultipartInfoXml_Document = new XmlDocument();
            RESTActivityV25_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            RESTActivityV25_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.RESTActivityV25.RequestMultipartInfoXml = RESTActivityV25_RequestMultipartInfoXml_Document;
            _flow.RESTActivityV25.Multipart=false;
            VTDPropertyInfoBase pi61 = new VTDPropertyInfoBase("NumberOfTickets");
            VTDBaseGetter binding_getter31 = new VTDObjectGetter(pi61);
            VTDPropertyInfoBase pi62 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='FlightOrderDetails'][1]/*[local-name(.)='NumberOfTickets'][1]");
            VTDBaseSetter binding_setter31 = new VTDXPathSetter(pi62,XmlTypeCode.UnsignedByte);
            bind_dir31 = new BindDirection(this.DataCursorActivity14,binding_getter31,binding_setter31,BindTargetType.ToInProperty);
            _flow.RESTActivityV25.InDirections.Add(bind_dir31);
            VTDPropertyInfoBase pi63 = new VTDPropertyInfoBase("NumberOfTickets");
            VTDBaseGetter binding_getter32 = new VTDObjectGetter(pi63);
            VTDPropertyInfoBase pi64 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='FlightOrderDetails'][1]/*[local-name(.)='NumberOfTickets'][1]");
            VTDBaseSetter binding_setter32 = new VTDXPathSetter(pi64,XmlTypeCode.UnsignedByte);
            bind_dir32 = new BindDirection(this.DataCursorActivity14,binding_getter32,binding_setter32,BindTargetType.ToInProperty);
            _flow.RESTActivityV25.InDirections.Add(bind_dir32);
            VTDPropertyInfoBase pi65 = new VTDPropertyInfoBase("FlightNumber");
            VTDBaseGetter binding_getter33 = new VTDObjectGetter(pi65);
            VTDPropertyInfoBase pi66 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='FlightOrderDetails'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter33 = new VTDXPathSetter(pi66,XmlTypeCode.UnsignedShort);
            bind_dir33 = new BindDirection(this.DataCursorActivity14,binding_getter33,binding_setter33,BindTargetType.ToInProperty);
            _flow.RESTActivityV25.InDirections.Add(bind_dir33);
            VTDPropertyInfoBase pi67 = new VTDPropertyInfoBase("FlightNumber");
            VTDBaseGetter binding_getter34 = new VTDObjectGetter(pi67);
            VTDPropertyInfoBase pi68 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='FlightOrderDetails'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter34 = new VTDXPathSetter(pi68,XmlTypeCode.UnsignedShort);
            bind_dir34 = new BindDirection(this.DataCursorActivity14,binding_getter34,binding_setter34,BindTargetType.ToInProperty);
            _flow.RESTActivityV25.InDirections.Add(bind_dir34);
            VTDPropertyInfoBase pi69 = new VTDPropertyInfoBase("DepartureDate");
            VTDBaseGetter binding_getter35 = new VTDObjectGetter(pi69);
            VTDPropertyInfoBase pi70 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='FlightOrderDetails'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseSetter binding_setter35 = new VTDXPathSetter(pi70,XmlTypeCode.Date);
            bind_dir35 = new BindDirection(this.DataCursorActivity14,binding_getter35,binding_setter35,BindTargetType.ToInProperty);
            _flow.RESTActivityV25.InDirections.Add(bind_dir35);
            VTDPropertyInfoBase pi71 = new VTDPropertyInfoBase("DepartureDate");
            VTDBaseGetter binding_getter36 = new VTDObjectGetter(pi71);
            VTDPropertyInfoBase pi72 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='FlightOrderDetails'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseSetter binding_setter36 = new VTDXPathSetter(pi72,XmlTypeCode.Date);
            bind_dir36 = new BindDirection(this.DataCursorActivity14,binding_getter36,binding_setter36,BindTargetType.ToInProperty);
            _flow.RESTActivityV25.InDirections.Add(bind_dir36);
            VTDPropertyInfoBase pi73 = new VTDPropertyInfoBase("CustomerName");
            VTDBaseGetter binding_getter37 = new VTDObjectGetter(pi73);
            VTDPropertyInfoBase pi74 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='FlightOrderDetails'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter37 = new VTDXPathSetter(pi74,XmlTypeCode.String);
            binding_setter37 = new StringFormaterDecorator(binding_setter37,"{DataSource.Flights_REST!Input.CustomerName}");
            bind_dir37 = new BindDirection(this.DataCursorActivity14,binding_getter37,binding_setter37,BindTargetType.ToInProperty);
            _flow.RESTActivityV25.InDirections.Add(bind_dir37);
            VTDPropertyInfoBase pi75 = new VTDPropertyInfoBase("CustomerName");
            VTDBaseGetter binding_getter38 = new VTDObjectGetter(pi75);
            VTDPropertyInfoBase pi76 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='FlightOrderDetails'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter38 = new VTDXPathSetter(pi76,XmlTypeCode.String);
            binding_setter38 = new StringFormaterDecorator(binding_setter38,"{DataSource.Flights_REST!Input.CustomerName}");
            bind_dir38 = new BindDirection(this.DataCursorActivity14,binding_getter38,binding_setter38,BindTargetType.ToInProperty);
            _flow.RESTActivityV25.InDirections.Add(bind_dir38);
            VTDPropertyInfoBase pi77 = new VTDPropertyInfoBase("Class");
            VTDBaseGetter binding_getter39 = new VTDObjectGetter(pi77);
            VTDPropertyInfoBase pi78 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='FlightOrderDetails'][1]/*[local-name(.)='Class'][1]");
            VTDBaseSetter binding_setter39 = new VTDXPathSetter(pi78,XmlTypeCode.String);
            binding_setter39 = new StringFormaterDecorator(binding_setter39,"{DataSource.Flights_REST!Input.Class}");
            bind_dir39 = new BindDirection(this.DataCursorActivity14,binding_getter39,binding_setter39,BindTargetType.ToInProperty);
            _flow.RESTActivityV25.InDirections.Add(bind_dir39);
            VTDPropertyInfoBase pi79 = new VTDPropertyInfoBase("Class");
            VTDBaseGetter binding_getter40 = new VTDObjectGetter(pi79);
            VTDPropertyInfoBase pi80 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='FlightOrderDetails'][1]/*[local-name(.)='Class'][1]");
            VTDBaseSetter binding_setter40 = new VTDXPathSetter(pi80,XmlTypeCode.String);
            binding_setter40 = new StringFormaterDecorator(binding_setter40,"{DataSource.Flights_REST!Input.Class}");
            bind_dir40 = new BindDirection(this.DataCursorActivity14,binding_getter40,binding_setter40,BindTargetType.ToInProperty);
            _flow.RESTActivityV25.InDirections.Add(bind_dir40);
            XmlDocument RESTActivityV25_ExpectedResponseXmlBody_Document = new XmlDocument();
            RESTActivityV25_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            RESTActivityV25_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV25.ExpectedResponseXmlBody = RESTActivityV25_ExpectedResponseXmlBody_Document;
            XmlDocument RESTActivityV25_ExpectedResponseJsonBody_Document = new XmlDocument();
            RESTActivityV25_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            RESTActivityV25_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV25.ExpectedResponseJsonBody = RESTActivityV25_ExpectedResponseJsonBody_Document;
            XmlDocument RESTActivityV25_ExpectedOutputProperties_Document = new XmlDocument();
            RESTActivityV25_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            RESTActivityV25_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion></ResponseHttpVersion><StatusCode></StatusCode><StatusDescription></StatusDescription><ResponseBody></ResponseBody><ResponseBodyAsBase64></ResponseBodyAsBase64></Arguments>");
            _flow.RESTActivityV25.ExpectedOutputProperties = RESTActivityV25_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(), "bin", "ReportResources");
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    